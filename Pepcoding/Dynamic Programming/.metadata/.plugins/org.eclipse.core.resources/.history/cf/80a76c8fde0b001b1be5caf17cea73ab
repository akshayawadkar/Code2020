import java.util.Arrays;
import java.util.LinkedList;
import java.util.Map;

public class _007_Print_MinCostPaths2 {

	private static class Pair{
		int i;
		int j;
		String psf;
		
		Pair(String psf, int x, int y){
			this.psf = psf;
			this.i = x;
			this.j = y;
			
		}
	}

	static Integer[][] dp;

	public static void main(String[] args) {

		int[][] arr = {{0,1,4,2,8,2},
					   {4,3,6,5,0,4},
					   {1,2,4,1,4,6},
					   {2,0,7,3,2,2},
					   {3,1,5,9,2,4},
					   {2,7,0,8,5,1}};

//		int[][] arr = { { 2, 6, 4, 1, 3 }, 
//					    { 9, 1, 1, 0, 5 },  
//					    { 0, 7, 5, 2, 0 }, 
//					    { 4, 3, 0, 4, 7 }, 
//					    { 2, 0, 1, 4, 1 } };

		dp = new Integer[arr.length][arr[0].length];

		int minCost = solve(arr, 0, 0);
		System.out.println(minCost);

		for (Integer[] d : dp) {
			System.out.println(Arrays.toString(d));
		}

		bfs();

	}

	private static void bfs() {
		
		LinkedList<Pair> q = new LinkedList<_007_Print_MinCostPaths2.Pair>();
		
		q.add(new Pair("", 0, 0));
		
		while(!q.isEmpty()) {
			
			int size = q.size();
			for(int i = 0; i < size; i++) {
				Pair curr = q.poll();
				
				if(curr.i == dp.length - 1 && curr.j == dp[0].length - 1) {
					System.out.println(curr.psf);
				}else if(curr.i == dp.length - 1) {
					q.add(new Pair(curr.psf + "H", curr.i, curr.j + 1));
				}else if(curr.j == dp[0].length -1) {
					q.add(new Pair(curr.psf + "V", curr.i + 1, curr.j));
				}else {
					if(dp[curr.i][curr.j + 1] < dp[curr.i + 1][curr.j]) {
						q.add(new Pair(curr.psf + "H", curr.i, curr.j + 1));
					}else if(dp[curr.i][curr.j + 1] > dp[curr.i + 1][curr.j]) {
						q.add(new Pair(curr.psf + "V", curr.i + 1, curr.j));
					}else {
						q.add(new Pair(curr.psf + "V", curr.i + 1, curr.j));
						q.add(new Pair(curr.psf + "H", curr.i, curr.j + 1));
						
					}
					
				}
				
			}
		}
		 

	}

	private static int solve(int[][] arr, int i, int j) {

		if (i >= arr.length || j >= arr[0].length) {

			return Integer.MAX_VALUE;
		}

		if (i == arr.length - 1 && j == arr[0].length - 1) {

			return dp[i][j] = arr[i][j];
		}

		if (dp[i][j] != null) {
			return dp[i][j];
		}

		return dp[i][j] = Math.min(solve(arr, i + 1, j), solve(arr, i, j + 1)) + arr[i][j];
	}

}
