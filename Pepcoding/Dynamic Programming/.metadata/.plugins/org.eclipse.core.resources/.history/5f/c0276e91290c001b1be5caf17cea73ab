import java.util.Arrays;
import java.util.LinkedList;

public class _0008_MinJumps_JumpGame_Leetcode {
	
	private static class Node{
		int idx;
		int size;
		int jumps;
		String psf;
		public Node(int idx, int size, int jumps, String psf) {
			super();
			this.idx = idx;
			this.size = size;
			this.jumps = jumps;
			this.psf = psf;
		}
		
		
	}
	
	public static void main(String[] args) {
		
//		int[] arr = {2, 3, 1, 1, 4};
		int[] arr = {3,3,0,2,1,2,4,2,0,0 };
		
		Long[] dp = new Long[arr.length];
		int minJumpsToReachEnd = (int) solve(arr, 0, dp);
		System.out.println(minJumpsToReachEnd);
		System.out.println(Arrays.toString(dp));
		bfs(dp, arr);
		
	}

	private static void bfs(Long[] dp, int[] arr) {

		LinkedList<Node> q = new LinkedList<_0008_MinJumps_JumpGame_Leetcode.Node>();
		q.add(new Node(0, 3, 4, 0));
		
		 
		
	}

	private static long solve(int[] arr, int currIdx, Long[] dp) {
		
		if(currIdx >= arr.length) {
			return Integer.MAX_VALUE;
		}
		
		
		if(currIdx == arr.length - 1) {
			return dp[currIdx] = (long) 0;
		}
		
		long min = Integer.MAX_VALUE;
		
		for(int i = 1; i <= arr[currIdx]; i++) {
			min = Math.min(min, 1 + solve(arr, currIdx + i, dp));
		}
		
		return dp[currIdx] = min;
	}
}
