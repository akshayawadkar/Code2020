import java.util.Arrays;
import java.util.LinkedList;
import java.util.Map;

public class _007_Print_MinCostPaths2 {

	static Integer[][] dp;
	public static void main(String[] args) {

		int[][] arr = { { 0, 1, 4, 2, 8, 2 },
						{ 4, 3, 6, 5, 0, 4 },
						{ 1, 2, 4, 1, 4, 6 },
						{ 2, 0, 7, 3, 2, 2 },
						{ 3, 1, 5, 9, 2, 4 },
						{ 2, 7, 0, 8, 5, 1 } };
		dp = new Integer[arr.length][arr[0].length];
		
		int minPath = getMinPath(arr, 0, 0);
		System.out.println(minPath);
		
		for(int[] d : dp) {
			System.out.println(Arrays.toString(d));
		}
		
	}

	private static int getMinPath(int[][] arr, int i, int j) {
		
		if(i >= arr.length || j >= arr[0].length) {
			return Integer.MAX_VALUE;
		}
		
		if(i == arr.length - 1 && j == arr[0].length - 1) {
			return dp[i][j] = arr[i][j];
		}

		if(dp[i][j] != null) {
			return dp[i][j];
		}
		 
		return dp[i][j] = Math.min(getMinPath(arr, i + 1, j), 
						getMinPath(arr, i, j + 1)) + arr[i][j];
	}
}
