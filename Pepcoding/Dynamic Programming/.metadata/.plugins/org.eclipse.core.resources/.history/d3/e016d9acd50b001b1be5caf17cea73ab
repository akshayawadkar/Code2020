import java.util.Map;

public class _007_Print_MinCostPaths {

	static Integer[][] dp;
	static Map<Integer, String> map;
	public static void main(String[] args) {
		
		int[][] arr = {{0,1,4,2,8,2},
					   {4,3,6,5,0,4},
					   {1,2,4,1,4,6},
					   {2,0,7,3,2,2},
					   {3,1,5,9,2,4},
					   {2,7,0,8,5,1}};
		dp = new Integer[arr.length][arr[0].length];
//		map = new HashMap<>
		
		int minCost = solve(arr, 0, 0, "");
		
		System.out.println(minCost);
	}

	private static int solve(int[][] arr, int i, int j, String curr) {
 
		if(i >= arr.length || j >= arr[0].length) {
			
			return Integer.MAX_VALUE;
		}
		
		if(i == arr.length - 1 && j == arr[0].length - 1) {
			System.out.println(reverse(curr));
			
			return arr[i][j];
		}
		
		if(dp[i][j] != null) {
			return dp[i][j];
		}
		
		return dp[i][j] = Math.min(solve(arr, i + 1, j, curr + "V")
								, solve(arr, i, j + 1, curr + "H")) + arr[i][j];
	}

	private static String reverse(String curr) {
	 
		return new StringBuilder(curr).reverse().toString();
	}
}
